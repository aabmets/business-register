enum PersonType {
	NATURAL
	JUDICIAL
}

input ShareholderInput {
	name: String
	tin: String
	equity: Int
}

input CompanyDetailsInput {
	name: String
	tin: String
	equity: Int
	foundingDate: String
	shareholders: [ShareholderInput]
}

type Shareholder {
	name: String!
	tin: String!
	equity: Int!
	founder: Boolean!
	personType: PersonType!
}

type CompanyDetails {
	name: String!
	tin: String!
	equity: Int!
	foundingDate: String!
	shareholders: [Shareholder!]!
}

type CompanyOverview {
	name: String!
	tin: String!
}

type SearchCompaniesPayload {
	companies: [CompanyOverview]
	result: Boolean!
	error: String
}

type CompanyDetailsPayload {
	company: CompanyDetails
	result: Boolean!
	error: [String]
}

type Query {
	searchCompanies(pattern: String!): SearchCompaniesPayload!
	getCompanyDetails(tin: String!): CompanyDetailsPayload!
}

type Mutation {
	createCompany(data: CompanyDetailsInput!): CompanyDetailsPayload!
	updateCompany(data: CompanyDetailsInput!): CompanyDetailsPayload!
}